Interactive elixir: ies -S mix

Accessing data through "patter matching":
-> "function" returns a tuple ([...], [...])
    { variable1, variable2 } = function(...)
-> these variables will have the returned value (in order of the return)

-> [color1, color2] = ["red", "green"]   // color1 = "red", color2 = "green"
-> [color1, color2, color3] = ["red", "green"]   // ERROR (no match of right hand)


Installing dependencies:
-> add the dep to mix.exs
-> cli: mix deps.get


Using :ex_doc:
-> $ mix docs


Writing tests using doctesting:
@doc """
    ...

## Examples

    iex> ...
    iex> ...
    ...

"""
def ...

Running tests: mix test

-------
Maps
-> "dictionary/object(JS)"

colors = %{primary: "red"}
colors.primary => red
colors = %{primary:"red", secondary: "blue"}

%{secondary: secondary_color_variable} = colors
    -> verifies if colors is a map
    -> verify if there is a "secondary" key
    -> if all yes, assign secondary_color_variable to the value of colors.secondary
    => patter matching

